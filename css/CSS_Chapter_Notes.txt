The idea is that every element on the page is contained inside of another element, which in turn can contain other elements—like Russian nesting dolls.

This hierarchical tag structure is known as the Document Object Model, or DOM for short. Each new level in the DOM is a child of the level above it.

In CSS, styling rules flow down from parents to children unless another style interrupts and takes priority.

CSS statements are made up of selectors, properties and values...

selector {
	property: value;
}

div {
	border: 1px solid black;
}


Traditionally, we organize css properties alphabetically (in sublime, you can alphabetize by selecting lines and clicking fn + f5)


div{	
	border: 1px solid black;
	margin: auto;	
	text-align: center;
	text-decoration: underline;
}




##
## ## NAMING THINGS
## 

In CSS we select dom elements to style using two methods
1. id -- which selects only one element per page
2. class -- which selects multiple elements per page

Although CSS offers a great deal of flexibility in choosing id and class names, there are a few restrictions and usage suggestions:

- Use only one id per element.
- No numbers are allowed at the beginning of the name (e.g., name1 is valid, but 1name isn’t).
- Dashes (-), underscores _, and CamelCase can be used to join multiple words (so foo-bar-baz, foo_bar_baz, and FooBarBaz are all valid names).
- Spaces are invalid in id names, and are used to separate multiple names in the case of classes (so id="foo bar" is illegal, while class="foo bar baz" places three separate classes on an element).
- Be consistent (e.g., if using dashes as separators, use them everywhere—don’t mix them with underscores).

!!
You want to name css classes and ids in terms of their domain function, not in terms of the styles content. 

So if we have an alert box that we want to be red, we don't want to name its css class "red", rather, we'd name it "alert". 

Focus on what the class is supposed to represent, not on its visual appearance. 
!!

#
# # IDs VS CLASSes
# 

Basically only use IDs if you absolutely have to. 
Uses classes always. (if you're sing javascript, you'll have to use IDs)

IDs have higher specificity than classes and so override classes in cases where IDs and Classes specify conflicting styles. in big complicated projects where style specifications cascade many levels down, this can be a huge problem. 


#
# # PRIORITY AND SPECIFICITY
# 

Conflict resolution is one of the trickiest things in all of css

- when two instructions conflict, the last one in the css file is the one the browser uses

- !important is a flag that forces the browser to use a particular style. 
YOU SHOULD NEVER USE !important
if ids are a bad thing to use because it make sepcificity more complicated, !important is even worse


WAYS TO INCREASE SPECIFICITY

1. add extra tags, eg from 

a {
	color: green;
}

to 

h1 a {
	color: green;
}

2. add classes, eg from 

a {
	color: green;
}

to 

a.bio-box{
	color: green;
}

THE RULE OF THUMB
- keep selectors as simple as possible so that when projects swell in complexity and inheritance cascades down many levels we can still be clear about what style instructions are being applied to what DOM elements. 

- if you find yourself writing hyper specific css selection, that's a good indication you need to rethink how you're applying things

example of an overly specific mess:

body div#exec-bio.bio-box a {
	color: orange;
}

^ THE ABOVE IS BAD ^

in general, we don't want to extend beyond 3 things in a selector
when you start to appraoch your selector depth limit of three we need to start thinking about adding another class


ORDERING CSS FILES
- go from most generic, site-wide styles at the top of your sheet down to the most specific, domain-specific modular styles at the bottom

so at this point in thte tutorial, our ordered and commented styles look like this
    <style type="text/css">

      /* GLOBAL STYLES */
      a {
          color: red;
      }

      /* SOCIAL STYLES */
      a.social-link{
        color: blue;
      }

      /* BIO STYLES */
      .bio-box {
        border: 1px solid black;
      } 

      .bio-copy a {
        color: green;
      }
      
    </style>


##
## ## COLORING
## 
- hex values
- rgb values
- rgba values


##
## ## SIZING
## 

pixels == px
points == pt
percentages = %

! percentage sizing is based on the container that the element is in
- percentage heights are weird and don't always work well -- this is because to use percentage height, the parent element's heigh must be set explicitly 
- typically, we don't set heights at all for web development

## EM

the preferred way to set font size is with em
- em works by using the em value provided as a percentage of the element's parent font size specification
- em is a way to set RELATIVE font sizees
- if no font size is specified anywhere in a given element's ancestry, em will use the browser default font size, which is 16px
so

.class-name{
	font-size: 0.5em;
}

on an element with no font size specification anywhere in its ancestry will set that font's size to 8px -- 50% of 16px

you can also use em to size other elements on the page. you just have to be careful because em is based on the font's line height. 


## REM
This rem unit works similarly to em, in that it is a percentage of an absolute font size, but instead of being cumulatively sized based on the whole parent/child tree, the rem unit always refers back to the font size of the html tag—in other words, it always refers to the most basic font size for the whole page.

In effect, the rem unit works like a document-wide setting, so you can set the size of elements like boxes, or font sizes, and have them all tie back to a single value: the font size of the html element. If you want to make everything a little bigger, or smaller, you can change just this one font size and everything on the page adapts.

rem is especially useful in combination with em units in developing modules. The best practice is to set a font size for the module’s wrapper using a rem unit, and then style the fonts inside using em units. Because rem values are absolute (in relation to the page font size), you don’t need to worry that the cumulative nature of em is going to keep going up the parent tree and make everything in the box tiny or huge (Section 3.5). This kind of styling allows you to create modules that can be safely dropped into any part of a page, while keeping the advantages of using relative font sizes.


## VH & VW

There are two newer dimensional units that are also incredibly useful for responsive (mobile) layouts: the viewport height, vh, and viewport width, vw. These units allow us to size elements on the page based on the actual size of the browser window or mobile device screen. Each vh or vw is 1 percent of the corresponding screen dimension, so 3vh would equal 3% of the height of the screen and 100vw would be 100% of the width.

Neither vh nor vw is affected by parent elements, and neither has any weird cumulative inheritance issues—everything is determined by the size of the browser window or device screen.


- this is awesome
- you can also set font sizes using vw but remember -- no matter what unit you're using to set font size, you're always setting the font's height / line height, even if you use vw (as opposed to vh)


## pleasing fonts
- web readable fonts tend to be between 14 and 18 pixels
- when designing sites, don't worry about pixel-perfect calculations
- just make sure your site looks and feels readable











